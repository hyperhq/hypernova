# lib/nova_plugins/hypervisor-hyper
# Configure the Hyper hypervisor

# Enable with:
#
#   VIRT_DRIVER=hyper

# Dependencies:
#
# - ``functions`` file
# - ``nova`` and ``glance`` configurations

# install_nova_hypervisor - install any external requirements
# configure_nova_hypervisor - make configuration changes, including those to other services
# start_nova_hypervisor - start any external services
# stop_nova_hypervisor - stop any external services
# cleanup_nova_hypervisor - remove transient data and cache

# Save trace setting
MY_XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

# Set up default repos
NOVA_HYPER_REPO=${NOVA_HYPER_REPO:-${GIT_BASE}/tbronchain/nova-hyper.git} #todo: change
NOVA_HYPER_BRANCH=${NOVA_HYPER_BRANCH:-develop} #todo: change

# Set up default directories
HYPER_DIR=$DEST/nova-hyper


HYPER_UNIX_SOCKET=/var/run/hyper.sock
HYPER_PID_FILE=/var/run/hyper.pid
HYPER_REGISTRY_PORT=${HYPER_REGISTRY_PORT:-5042}

DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME:-${DEFAULT_IMAGE_NAME}}
HYPER_REGISTRY_IMAGE=${HYPER_REGISTRY_IMAGE:-registry}
HYPER_REGISTRY_IMAGE_NAME=registry

#HYPER_APT_REPO=${HYPER_APT_REPO:-https://apt.dockerproject.org/repo}


# Entry Points
# ------------

# clean_nova_hypervisor - Clean up an installation
function cleanup_nova_hypervisor {
    stop_service hyper

    # Clean out work area
    sudo rm -rf /var/lib/hyper

    # remove docker bits from nova
    rm $NOVA_DIR/nova/virt/hyper
    rm $NOVA_DIR/etc/nova/rootwrap.d/hyper.filters
}

# configure_nova_hypervisor - Set config files, create data dirs, etc
function configure_nova_hypervisor {
    iniset $NOVA_CONF DEFAULT compute_driver novahyper.virt.hyper.driver.HyperDriver
    iniset $GLANCE_API_CONF DEFAULT container_formats ami,ari,aki,bare,ovf,docker
}

# is_docker_running - Return 0 (true) if Docker is running, otherwise 1
function is_docker_running {
    local hyper_pid
    if [ -f "$HYPER_PID_FILE" ]; then
        hyper_pid=$(cat "$HYPER_PID_FILE")
    fi
    if [[ -z "$hyper_pid" ]] || ! ps -p "$hyper_pid" | grep [h]yper; then
        return 1
    fi
    return 0
}

# install_nova_hypervisor() - Install external components
function install_nova_hypervisor {
    hv_type=$(grep -Rni hyper $NOVA_DIR/nova/compute/hv_type.py | wc -l)
    if [ $hv_type -eq 0 ]; then
        patch $NOVA_DIR/nova/compute/hv_type.py -i $HYPER_DIR/nova/compute/hv_type.patch
    fi
    setup_develop $HYPER_DIR
    # TODO : move into configure_nova_hypervisor_rootwrap if
    #        https://review.openstack.org/#/c/84839/ is merged
}

# start_nova_hypervisor - Start any required external services
function start_nova_hypervisor {
    #todo
    # Make sure Hyper is installed
    #if ! ( is_package_installed docker || is_package_installed docker-io || is_package_installed docker-engine ) ; then
    #    die $LINENO "Docker is not installed.  Please run tools/docker/install_docker.sh"
    #fi
    #if ! (is_docker_running); then
    #    die $LINENO "Docker not running"
    #fi

    # Gather some information
    hyper version
    hyper info

    ## push the rootwrap
    #sudo cp $HYPER_DIR/etc/nova/rootwrap.d/hyper.filters  /etc/nova/rootwrap.d/hyper.filters

    echo "Checking default image for docker..."
    if ! (glance image-show "$DEFAULT_IMAGE_NAME"); then
        echo "Pulling $DOCKER_IMAGE_NAME..."
        hyper pull $DOCKER_IMAGE_NAME
        echo "Saving $DOCKER_IMAGE_NAME to glance..."
        TOKEN=$(openstack token issue -c id -f value)
        docker save $DOCKER_IMAGE_NAME | openstack --os-token $TOKEN --os-url $GLANCE_SERVICE_PROTOCOL://$GLANCE_HOSTPORT image create $DEFAULT_IMAGE_NAME --public --container-format docker --disk-format raw
    fi
}

# stop_nova_hypervisor - Stop any external services
function stop_nova_hypervisor {
    echo "stop nova pods"
    # todo
    # Stop the docker registry container
    #docker stop $DOCKER_REGISTRY_IMAGE_NAME
    #docker rm $DOCKER_REGISTRY_IMAGE_NAME
}

# Restore xtrace
$MY_XTRACE

# Local variables:
# mode: shell-script
# End:
